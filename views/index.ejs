<!DOCTYPE html>
<html>

<head>
    <title>
        PokeGo Slave
    </title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src='//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js'></script>
    <link rel='stylesheet' href='//cdn.materialdesignicons.com/1.6.50/css/materialdesignicons.min.css' />
    <link rel='stylesheet' href='//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css' integrity='sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7'
        crossorigin='anonymous' />
    <link rel='stylesheet' href='//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css' integrity='sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r'
        crossorigin='anonymous' />
    <script src='//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js' integrity='sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS'
        crossorigin='anonymous'></script>
    <!-- please append your own key to this google maps api -->
    <!-- api key: AIzaSyCb0On0hKftgysntiZpWFGaKEibox-7Ev4 -->
    <script src='//maps.googleapis.com/maps/api/js'></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/marker-animate-unobtrusive/0.2.8/vendor/markerAnimate.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/marker-animate-unobtrusive/0.2.8/SlidingMarker.min.js"></script>
    <script src="//cdn.socket.io/socket.io-1.4.5.js"></script>
    <script type='text/javascript' src='//cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js'></script>
    <style>
        #google-map {
            width: calc(100% - 300px);
            height: calc(100% - 180px);
            top: 50px;
            left: 0px;
            bottom: 130px;
            position: absolute;
            padding: 0px;
            background-color: #eee;
            transition: all 500ms ease-out 0.5s;
        }
        
        #storage-tab {
            width: 40px;
            height: 40px;
            line-height: 40px;
            right: 0px;
            top: 50px;
            position: absolute;
            padding: 0px 10px 0px 10px;
            text-align: center;
            color: #fff;
            background-color: #444;
            border-radius: 0px 0px 0px 5px;
            transition: all 500ms ease-out 0.5s;
            opacity: 0;
        }
        
        #storage-panel {
            width: 300px;
            height: calc(100% - 180px);
            top: 50px;
            right: 0px;
            bottom: 130px;
            position: absolute;
            padding: 0px;
            background-color: #fff;
            border-left: 1px solid #444;
            transition: all 500ms ease-out 0.5s;
        }
        
        #storage-panel-tab {
            width: 140px;
            height: 20px;
            padding: 0px 10px 0px 10px;
            text-align: center;
            color: #fff;
            background-color: #444;
            border-radius: 0px 0px 5px 0px;
        }
        
        #storage-panel-content {
            height: calc(100% - 20px);
            padding: 10px 10px 10px 10px;
            color: #444;
            background-color: #fff;
        }
        
        #captives {
            top: 155px;
            width: calc(100% - 20px);
            bottom: 0px;
            position: absolute;
            overflow-y: scroll;
        }
        
        #pokemons {
            top: 155px;
            width: calc(100% - 20px);
            bottom: 0px;
            position: absolute;
            overflow-y: scroll;
        }
        
        #eggs {
            top: 155px;
            width: calc(100% - 20px);
            bottom: 0px;
            position: absolute;
            overflow-y: scroll;
        }
        
        #items {
            top: 155px;
            width: calc(100% - 20px);
            bottom: 0px;
            position: absolute;
            overflow-y: scroll;
        }
        
        #collected-modal ul {
            list-style-type: none;
            width: 100%;
            margin: 0px;
            padding: 0px;
        }
        
        #collected-modal ul li {
            width: 100%;
            height: 30px;
            margin: 0px;
            padding: 0px;
            text-align: left;
        }
        
        .collected-item {
            width: 100%;
            height: 40px;
            padding-left: 6px;
            padding-right: 6px;
        }
        
        #nearby-panel-tab {
            width: 100px;
            height: 20px;
            left: 0px;
            bottom: 130px;
            position: absolute;
            padding: 0px 10px 0px 10px;
            text-align: center;
            color: #fff;
            background-color: #444;
            border-radius: 0px 5px 0px 0px;
        }
        
        #nearby-panel {
            width: 100%;
            height: 130px;
            left: 0px;
            bottom: 0px;
            position: absolute;
            color: #444;
            background-color: #fff;
            border-top: 1px solid #444;
            text-align: center;
            overflow-x: auto;
            overflow-y: hidden;
        }
        
        #nearby-panel ul {
            list-style-type: none;
            width: 99999px;
            margin: 0px;
            padding: 0px;
        }
        
        #nearby-panel li {
            float: left;
        }
        
        .nearby-item {
            width: 120px;
            height: 100%;
            margin-top: 10px;
            margin-left: 6px;
            margin-right: 6px;
            text-align: center;
        }
        
        .nearby-item > div {
            width: 120px;
            height: 20px;
        }
        
        .nearby-item > img {
            width: 60px;
            height: 60px;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand">
                    <img alt="Brand" src="images/brand-logo.png" style="margin-top:-10px; float: left;" />
                    <span>PokeGo Slave - </span>
                    <span data-bind="text: trainerInfo"></span>
                </a>
            </div>
        </div>
    </nav>

    <!-- map -->
    <div id="google-map"></div>

    <!-- storage/inventory -->
    <button id="storage-tab" class="btn">&lt;&lt;</button>
    <div id="storage-panel">
        <div id="storage-panel-tab">Trainer's Inventory</div>
        <div id="storage-panel-content">
            <table class="table table-condensed">
                <tbody class="table-bordered">
                    <tr>
                        <td width="70">PokeCoin</td>
                        <td width="10">:</td>
                        <td data-bind="text: pokeCoin"></td>
                    </tr>
                    <tr>
                        <td>Stardust</td>
                        <td>:</td>
                        <td data-bind="text: stardust"></td>
                    </tr>
                </tbody>
            </table>

            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#captives" aria-controls="captives" role="tab" data-toggle="tab">Captured</a></li>
                <!--
                <li role="presentation"><a href="#pokemons" aria-controls="pokemons" role="tab" data-toggle="tab">Pokemons</a></li>
                -->
                <li role="presentation" class="dropdown">
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                        Pokemons <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu">
                        <li role="presentation"><a href="#pokemons" aria-controls="pokemons" role="tab" data-toggle="tab">Pokemons</a></li>
                        <li role="presentation"><a href="#eggs" aria-controls="eggs" role="tab" data-toggle="tab">Eggs</a></li>
                    </ul>
                </li>
                <li role="presentation"><a href="#items" aria-controls="items" role="tab" data-toggle="tab">Items</a></li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane fade in active" id="captives">
                    <div style="height: 30px; line-height: 30px;">Captured Pokemons: <span data-bind="text: totalCaptured"></span></div>
                    <table class="table table-condensed table-striped">
                        <tbody class="table-bordered" data-bind="foreach: captivePokemons">
                            <tr>
                                <td width="50" height="50"><img data-bind="attr: { src: data.img, width: 40, height: 40 }" /></td>
                                <td>
                                    <div style="width:100%;"><span data-bind="text: data.name"></span></div>
                                    <div style="width:100%;">Captured: <span data-bind="text: count"></span></div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="pokemons">
                    <div style="height: 30px; line-height: 30px;">Pokemons: <span data-bind="text: pokemons().length"></span>/<span data-bind="text: pokeStorage"></span></div>
                    <form class="form-inline text-center">
                        <span>Sort by: </span>
                        <div class="form-group">
                            <input type="radio" class="" name="pokemon-sort" id="pokemon-sort-number" checked="checked">
                            <label for="exampleInputName2">#</label>
                        </div>
                        <div class="form-group" style="margin-left: 30px;">
                            <input type="radio" class="" name="pokemon-sort" id="pokemon-sort-name">
                            <label for="exampleInputName2">Name</label>
                        </div>
                        <div class="form-group" style="margin-left: 30px;">
                            <input type="radio" class="" name="pokemon-sort" id="pokemon-sort-cp">
                            <label for="exampleInputName2">CP</label>
                        </div>
                    </form>
                    <table class="table table-condensed table-striped">
                        <tbody class="table-bordered" data-bind="foreach: pokemons">
                            <tr>
                                <td width="50" height="50"><img data-bind="attr: { src: data.img, width: 40, height: 40 }" /></td>
                                <td>
                                    <div style="width:50%; float:left;"><span data-bind="text: data.name"></span></div>
                                    <div style="width:50%; float:right;">HP: <span data-bind="text: stamina"></span>/<span data-bind="text: stamina_max"></span></div>
                                    <div style="width:50%; float:left;">CP: <span data-bind="text: cp"></span></div>
                                    <div style="width:50%; float:right;"><img data-bind="attr: { src: defendingIcon, width: 20, height: 20 }"></img>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="eggs">
                    <div style="height: 30px; line-height: 30px;">Eggs: <span data-bind="text: eggs().length"></span>/9</div>
                    <table class="table table-condensed table-striped">
                        <tbody class="table-bordered" data-bind="foreach: eggs">
                            <tr>
                                <td width="50" height="50"><img src="images/egg-40.png" width="40" height="40" /></td>
                                <td>
                                    <div style="height:40px; line-height: 40px; float:left;">Hatching: <span data-bind="text: progress"></span>/<span data-bind="text: egg_km_walked_target"></span> km</div>
                                    <div style="width:40px; height:40px; line-height: 40px; float:right;"><img data-bind="attr: { src: incubatedIcon, width: 40, height: 40 }"></img>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="items">
                    <div style="height: 30px; line-height: 30px;">Items: <span data-bind="text: totalItems"></span>/<span data-bind="text: itemStorage"></span></div>
                    <table class="table table-condensed table-striped">
                        <tbody class="table-bordered" data-bind="foreach: items">
                            <tr>
                                <td width="50" height="50"><img data-bind="attr: { src: img, width: 40, height: 40 }" /></td>
                                <td>
                                    <div style="width:100%;"><span data-bind="text: name"></span></div>
                                    <div style="width:100%;"><span>Count: </span><span data-bind="text: count"></span></div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- nearby pokemons -->
    <div id="nearby-panel-tab">Sightings</div>
    <div id="nearby-panel">
        <ul data-bind="foreach: nearbyPokemons">
            <li>
                <div class="nearby-item">
                    <div><span data-bind="text: data.name"></span></div>
                    <img data-bind="attr: { src: data.img }" />
                    <!--<div><span data-bind="text: DistanceMeters"></span>m++</div>-->
                </div>
            </li>
        </ul>
    </div>

    <div id="collected-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-sm">
            <div class="modal-content nearby-item" style="padding-top: 20px; padding-bottom: 20px;width: 200px;">
                <div style="height: 30px; line-height: 30px;"><span>Collected Items:</span></div>
                <ul data-bind="foreach: lastCollectedItems" style="background-colo:#ddd;">
                    <li>
                        <div class="collected-item" style="width:100%; height: 50px;">
                            <img data-bind="attr: { src: img, width: 40, height: 40 }" ><span data-bind="text: item_name"></span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div id="captured-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-sm">
            <div class="modal-content text-center nearby-item" style="padding-top: 20px; padding-bottom: 20px;width: 200px;">
                <div class="text-center" style="width:100%;"><span data-bind="text: latestCaptiveName"></span> <span>Captured</span></div>
                <img data-bind="attr: { src: latestCaptiveImage }" />
            </div>
        </div>
    </div>

    <div id="hatched-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-sm">
            <div class="modal-content text-center nearby-item" style="padding-top: 20px; padding-bottom: 20px;width: 200px;">
                <div class="text-center" style="width:100%;">Hatched</div>
                <table class="table table-condensed table-striped">
                    <tbody class="table-bordered" data-bind="foreach: hatched">
                        <tr>
                            <td width="60" height="60"><img data-bind="attr: { src: pokemon.img, width: 40, height: 40 }" /></td>
                            <td>
                                <div><span data-bind="text: pokemon.name"></span></div>
                                <div>Candy: <span data-bind="text: candy"></span></div>
                                <div>Stardust: <span data-bind="text: stardust"></span></div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="progress-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-sm">
            <div class="modal-content text-center" style="padding-top: 20px; padding-bottom: 20px;">
                <img src="images/spinner.gif" style="width: 60px; height: 60px;" /><br/>
                <span style="font-size: 18px;">Transfering pokemon...</span>
            </div>
        </div>
    </div>

    <script>
    // global variables
    var token = '<%=token;%>';
    var storageOpened = false;
    var socket = null;
    var map = null;
    var deployedBarriers = [];
    var playerMarker = null;
    var destinationMarker = null;
    var capturedMarker = null;
    var character = null;
    var pokeStops = [];
    var gyms = [];
    var plottedPokemons = [];

    function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // observable objects for knockout binding
    function BindedData() {
        this.trainerName = ko.observable('');
        this.trainerTeam = ko.observable('');
        this.trainerLevel = ko.observable(0);
        this.trainerExp = ko.observable(0);
        this.trainerNextExp = ko.observable(0);
        this.trainerKm = ko.observable(0);
        this.trainerInfo = ko.computed(() => {
            return this.trainerName() + ', Lv.' + this.trainerLevel() + ', Team: ' + this.trainerTeam() +
                ', Exp: ' + numberWithCommas(this.trainerExp()) + '/' + numberWithCommas(this.trainerNextExp()) +
                ', km walked: ' + numberWithCommas(this.trainerKm()) + 'km';
        }, this);
        this.pokeCoin = ko.observable(0);
        this.stardust = ko.observable(0);
        this.pokeStorage = ko.observable(0);
        this.itemStorage = ko.observable(0);
        this.latestCaptiveName = ko.observable('');
        this.latestCaptiveImage = ko.observable('');
        this.totalCaptured = ko.observable(0);
        this.lastCollectedItems = ko.observableArray();
        this.nearbyPokemons = ko.observableArray();
        this.captivePokemons = ko.observableArray();
        this.pokemons = ko.observableArray();
        this.eggs = ko.observableArray();
        this.items = ko.observableArray();
        this.totalItems = ko.observable(0);
        this.hatched = ko.observableArray();
    }
    var bindedData = new BindedData();

    // init socket io
    function initSocket() {
        socket = io.connect('//localhost:3100');

        // on deploy barriers
        socket.on('barriers', function (data) {
            deployBarriers(data.barriers);
            deployedBarriers = data.barriers;
        });

        // on update player
        socket.on('character', function (data) {
            character = data.character;
            bindedData.trainerName(data.character.username);
            bindedData.trainerTeam(data.character.team);
            bindedData.trainerLevel(data.character.level);
            bindedData.trainerExp(data.character.experience);
            bindedData.trainerNextExp(data.character.nextExperience);
            bindedData.trainerKm(Math.round(data.character.kmWalked * 100) / 100);
            bindedData.pokeCoin(data.character.pokeCoin);
            bindedData.stardust(data.character.stardust);
            bindedData.pokeStorage(data.character.pokeStorage);
            bindedData.itemStorage(data.character.itemStorage);
            setPlayerLocation(data.character.location.latitude, data.character.location.longitude);

            // update captive data
            var count = 0;
            data.character.captives.forEach(captive => {
                count = count + captive.count;
            });
            bindedData.totalCaptured(count);
            bindedData.captivePokemons(data.character.captives);
            // add defending icon
            data.character.pokemons.forEach(pokemon => {
                pokemon.defendingIcon = ko.computed(() => {
                    if (pokemon.defending != '') {
                        if (data.character.team == 'Valor') {
                            return 'images/gym-icon-valor-40.png';
                        }
                        else if (data.character.team == 'Mystic') {
                            return 'images/gym-icon-mystic-40.png';
                        }
                        else if (data.character.team == 'Instinct') {
                            return 'images/gym-icon-instinct-40.png';
                        }
                        else {
                            return 'images/empty.png';
                        }
                    }
                    else {
                        return 'images/empty.png';
                    }
                });
            });

            // sort pokemons based on selection
            sortPokemons(data.character.pokemons);
            // add defending icon
            data.character.eggs.forEach(egg => {
                egg.incubatedIcon = ko.computed(() => {
                    if (egg.egg_incubator_id != '') {
                        return 'images/egg-incubator-40.png';
                    }
                    else {
                        return 'images/empty.png';
                    }
                });
            });
            bindedData.eggs(data.character.eggs);
            bindedData.totalItems(data.character.totalItems);
            data.character.items.forEach(item => {
                item.img = 'images/items/' + item.item_id + '.png';
            });
            bindedData.items(data.character.items);

            // hatched info
            bindedData.hatched(data.hatchedInfo);
            if (data.hatchedInfo.length > 0) {
                $('#hatched-modal').modal('show');           
                setTimeout(function(){
                    $('#hatched-modal').modal('hide');
                }, 5000);
            }
        });

        // on cleaning up pokemons
        socket.on('cleaningPokemon', function () {
            $('#progress-modal').modal('show');
        });

        socket.on('pokemonCleaned', function () {
            $('#progress-modal').modal('hide');
        });

        // on setting new destination
        socket.on('destination', function (data) {
            plotDestination(data.destination);
        });

        // on collect items
        socket.on('collected', function (data) {
            // do something to data.items (each item contain item_id)
            data.items.forEach(item => {
                item.img = ko.observable('images/items/' + item.item_id + '.png');
            });
            alertCollectedItems(data.items);
        });

        // on captured pokemon
        socket.on('captured', function (data) {
            bindedData.latestCaptiveName(data.pokemon.data.name);
            bindedData.latestCaptiveImage(data.pokemon.data.img);
            plotCapturedPokemon(data.pokemon);
        });

        // on heartbeat
        socket.on('heartbeat', function (data) {
            // clear pokemons
            plottedPokemons.forEach((pokemon) => {
                pokemon.marker.setMap(null);
            });
            plottedPokemons = [];

            // move character location
            setPlayerLocation(data.heartbeat.location.latitude, data.heartbeat.location.longitude);

            // show pokestops
            data.heartbeat.pokeStops.forEach((pokeStop) => {
                plotPokeStop(pokeStop);
            });

            // show gyms
            data.heartbeat.gyms.forEach((gym) => {
                plotGym(gym);
            });

            // show catchable pokemons on the map
            data.heartbeat.catchablePokemons.forEach((pokemon) => {
                plotCatchablePokemon(pokemon);
                plottedPokemons.push(pokemon);
            });

            // update nearby pokemons
            bindedData.nearbyPokemons(data.heartbeat.nearbyPokemons);
        });
    }

    // map functions
    function initMap() {
        map = new google.maps.Map(document.getElementById('google-map'), {
            center: { lat: <%=character.location.latitude;%>, lng: <%=character.location.longitude;%> },
            zoom: 17
        });
        
        playerMarker = new SlidingMarker({
            position: map.center,
            icon: 'images/person-40.png',
            map: map,
            duration: <%=loopInterval;%>,
            easing: "linear"
        });
    }

    function deployBarriers(barriers) {
        // remove old barriers
        deployedBarriers.forEach((deployed) => {
            deployed.marker.setMap(null);
        });

        barriers.forEach((barrier) => {
            barrier.marker = new google.maps.Marker({
                position: { lat: barrier.latitude, lng: barrier.longitude },
                icon: 'images/barrier-40.png',
                map: map
            });
        });
    }

    function setPlayerLocation(latitude, longitude) {
        if (playerMarker && map) {
            playerMarker.setPosition({ lat: latitude, lng: longitude });
            map.setCenter(playerMarker.position);
        }
    }

    function plotPokeStop(pokeStop) {
        var icon = null;
        if (pokeStop.lure_info) {
            icon = pokeStop.enabled ? 'images/pokestop-lure-40.png' : 'images/pokestop-lure-used-40.png';
        }
        else {
            icon = pokeStop.enabled ? 'images/pokestop-40.png' : 'images/pokestop-used-40.png';
        }

        // find pokeStop
        var ps = pokeStops.find((ps) => {
            return ps.id == pokeStop.id
        });

        // if not found, create one and insert it, else, replace
        if (typeof(ps) == 'undefined') {
            pokeStop.marker = new google.maps.Marker({
                position: { lat: pokeStop.latitude, lng: pokeStop.longitude },
                icon: icon,
                map: map
            });
            pokeStops.push(pokeStop);
        }
        else {
            pokeStop.marker = ps.marker;
            pokeStop.marker.setIcon(icon);
            var idx = pokeStops.indexOf(ps);
            pokeStops[idx] = pokeStop;
        }
    }

    function plotGym(gym) {
        var icon = null;
        switch (gym.owned_by_team) {
            case 0:
                icon = 'images/gym-80.png';
                break;
            case 1:
                icon = 'images/gym-mystic-80.png';
                break;
            case 2:
                icon = 'images/gym-valor-80.png';
                break;
            case 3:
                icon = 'images/gym-instinct-80.png';
                break;
        }

        // find gym
        var gm = gyms.find((gm) => {
            return gm.id == gym.id
        });

        // if not found, create one and insert it, else, replace
        if (typeof(gm) == 'undefined') {
            gym.marker = new google.maps.Marker({
                position: { lat: gym.latitude, lng: gym.longitude },
                icon: icon,
                map: map
            });
            gyms.push(gym);
        }
        else {
            gym.marker = gm.marker;
            gym.marker.setIcon(icon);
            var idx = gyms.indexOf(gm);
            gyms[idx] = gym;
        }
    }

    function plotCatchablePokemon(pokemon) {
        pokemon.marker = new google.maps.Marker({
            position: { lat: pokemon.latitude, lng: pokemon.longitude },
            icon: {
                url: pokemon.data.img,
                scaledSize: new google.maps.Size(40, 40),
                origin: new google.maps.Point(0,0),
                anchor: new google.maps.Point(20,20)
            },
            map: map
        });
    }

    function plotCapturedPokemon(pokemon) {
        pokemon.marker = new google.maps.Marker({
            position: { lat: pokemon.latitude, lng: pokemon.longitude },
            icon: 'images/pokeball-40.png',
            map: map
        });
        $('#captured-modal').modal('show');
        setTimeout(function(){
            pokemon.marker.setMap(null);
            pokemon.marker = null;
            $('#captured-modal').modal('hide');
        }, 3000);
    }

    function alertCollectedItems(items) {
        bindedData.lastCollectedItems.removeAll();
        items.forEach((item) => {
            bindedData.lastCollectedItems.push(item);
        });
        $('#collected-modal').modal('show');
        setTimeout(function(){
            $('#collected-modal').modal('hide');
        }, 3000);
    }

    function plotDestination(destination) {
        if (!destination) {
            destinationMarker.setMap(null);
            destinationMarker = null;
        }
        else {
            if (!destinationMarker) {
                destinationMarker = new google.maps.Marker({
                    position: { lat: destination.latitude, lng: destination.longitude },
                    icon: 'images/flag-40.png',
                    map: map
                });
            }
            else {
                destinationMarker.setPosition({ lat: destination.latitude, lng: destination.longitude });
            }
        }
    }

    function sortPokemons(pokemons) {
        if ($('#pokemon-sort-number').is(':checked')) {
            pokemons.sort(function(a, b) {
                return a.pokemon_id - b.pokemon_id || b.cp - a.cp;
            });
        }
        else if ($('#pokemon-sort-name').is(':checked')) {
            pokemons.sort(function(a, b) {
                return a.data.name.toLowerCase().localeCompare(b.data.name.toLowerCase());
            });
        }
        else if ($('#pokemon-sort-cp').is(':checked')) {
            pokemons.sort(function(a, b) {
                return b.cp - a.cp;
            });
        }
        bindedData.pokemons(pokemons);
    }

    $(document).ready(function() {
        // initialize progress modal dialog
        $('#collected-modal').modal({ backdrop: true, keyboard: true, show: false });
        $('#captured-modal').modal({ backdrop: true, keyboard: true, show: false });
        $('#hatched-modal').modal({ backdrop: true, keyboard: true, show: false });
        $('#progress-modal').modal({ backdrop: 'static', keyboard: false, show: false });

        // init socket.io
        initSocket();
        
        // init map
        initMap();

        // init knockout
        ko.applyBindings(bindedData);

        // add pokemon short event handler
        $('#pokemon-sort-number').click(function () { sortPokemons(bindedData.pokemons()); });
        $('#pokemon-sort-name').click(function () { sortPokemons(bindedData.pokemons()); });
        $('#pokemon-sort-cp').click(function () { sortPokemons(bindedData.pokemons()); });
    });
</script>

</body>

</html>